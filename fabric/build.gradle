plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

sourceSets {
    gametest {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        gametest {
            server()
            name "Game Test"
            property("fabric-api.gametest", "true")
            runDir "run/gametest"
            source "gametest"
        }

        gametestClient {
            client()
            name "Game Test Client"
            source "gametest"
        }
    }
}

base {
    archivesName = rootProject.archives_base_name + "-fabric"
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modApi "com.terraformersmc:modmenu:${rootProject.modmenu_version}"
    modApi "me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}"
    if (rootProject.hasProperty("with_rei") && rootProject.property("with_rei") == "true") {
        modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
    }
    if (rootProject.hasProperty("with_emi") && rootProject.property("with_emi") == "true") {
        modRuntimeOnly "dev.emi:emi-fabric:${rootProject.emi_version}"
    }
    if (rootProject.hasProperty("with_jei") && rootProject.property("with_jei") == "true") {
        modRuntimeOnly "mezz.jei:jei-${rootProject.jei_minecraft_version}-fabric:${rootProject.jei_version}"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
